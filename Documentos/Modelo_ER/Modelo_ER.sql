-- MySQL Script generated by MySQL Workbench
-- Sat 11 May 2024 07:09:58 PM -04
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema camicandy
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `camicandy` ;

-- -----------------------------------------------------
-- Schema camicandy
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `camicandy` ;
USE `camicandy` ;

-- -----------------------------------------------------
-- Table `camicandy`.`clientes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `camicandy`.`clientes` ;

CREATE TABLE IF NOT EXISTS `camicandy`.`clientes` (
  `id` INT(11) NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `direccion` VARCHAR(80) NOT NULL,
  `telefono` VARCHAR(16) NOT NULL,
  `cedula` VARCHAR(12) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  UNIQUE INDEX `cedula_UNIQUE` (`cedula` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `camicandy`.`productos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `camicandy`.`productos` ;

CREATE TABLE IF NOT EXISTS `camicandy`.`productos` (
  `id` INT(11) NOT NULL,
  `nombre` VARCHAR(20) NOT NULL,
  `fecha_de_vencimiento` DATE NOT NULL,
  `cantidad_disponible` INT(3) NOT NULL,
  `imagen` LONGBLOB NULL DEFAULT NULL,
  `precio_en_dolares` DECIMAL(4,2) NOT NULL,
  `unidad_de_medicion` VARCHAR(3) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `camicandy`.`proveedores`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `camicandy`.`proveedores` ;

CREATE TABLE IF NOT EXISTS `camicandy`.`proveedores` (
  `id` INT(11) NOT NULL,
  `nombre` VARCHAR(50) NOT NULL,
  `rif` VARCHAR(12) NOT NULL,
  `direccion` VARCHAR(80) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `idproveedores_UNIQUE` (`id` ASC),
  UNIQUE INDEX `rif_UNIQUE` (`rif` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `camicandy`.`usuarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `camicandy`.`usuarios` ;

CREATE TABLE IF NOT EXISTS `camicandy`.`usuarios` (
  `id` INT(11) NOT NULL,
  `cedula` VARCHAR(12) NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `rol` ENUM('empleado', 'administrador') NOT NULL,
  `hash_de_contrasena` VARCHAR(60) NOT NULL,
  `pregunta_seguridad` ENUM('¿Cuándo es tu cumpleaños?', '¿A qué secundaria fuiste?', '¿Cómo se llamaba tu mamá?', '¿Cuál es tu postre favorito?') NOT NULL,
  `respuesta_seguridad` VARCHAR(60) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `idusuarios_UNIQUE` (`id` ASC),
  UNIQUE INDEX `cedula_UNIQUE` (`cedula` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `camicandy`.`sesiones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `camicandy`.`sesiones` ;

CREATE TABLE IF NOT EXISTS `camicandy`.`sesiones` (
  `id` INT(11) NOT NULL,
  `token` TEXT NOT NULL,
  `valido_hasta` TIMESTAMP NOT NULL,
  `usuarios_id` INT(11) NOT NULL,
  PRIMARY KEY (`id`, `usuarios_id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  UNIQUE INDEX `token_UNIQUE` USING HASH (`token`),
  INDEX `fk_sesiones_usuarios1_idx` (`usuarios_id` ASC),
  CONSTRAINT `fk_sesiones_usuarios1`
    FOREIGN KEY (`usuarios_id`)
    REFERENCES `camicandy`.`usuarios` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `camicandy`.`transacciones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `camicandy`.`transacciones` ;

CREATE TABLE IF NOT EXISTS `camicandy`.`transacciones` (
  `id` INT(11) NOT NULL,
  `marca_de_tiempo` TIMESTAMP NOT NULL,
  `importe_en_dolares` DECIMAL(5,2) NULL DEFAULT NULL,
  `tasa_bcv` DECIMAL(6,2) UNSIGNED NOT NULL,
  `clientes_id` INT(11) NULL DEFAULT NULL,
  `proveedores_id` INT(11) NULL DEFAULT NULL,
  `usuarios_id` INT(11) NOT NULL,
  PRIMARY KEY (`id`, `usuarios_id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_transacciones_clientes1_idx` (`clientes_id` ASC),
  INDEX `fk_transacciones_proveedores1_idx` (`proveedores_id` ASC),
  INDEX `fk_transacciones_usuarios1_idx` (`usuarios_id` ASC),
  CONSTRAINT `fk_transacciones_clientes1`
    FOREIGN KEY (`clientes_id`)
    REFERENCES `camicandy`.`clientes` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_transacciones_proveedores1`
    FOREIGN KEY (`proveedores_id`)
    REFERENCES `camicandy`.`proveedores` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_transacciones_usuarios1`
    FOREIGN KEY (`usuarios_id`)
    REFERENCES `camicandy`.`usuarios` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COMMENT = '* Falta añadir un trigger o un CHECK para revisar que sólo clientes_id o proveedores_id es NULL pero no ambos\\\\n* También falta verificar que sólo el administrador puede registrar una compra\\\\n* columna monto: Si es positivo la transacción fue una venta a un cliente, si es negativo fue una compra a un proveedor';


-- -----------------------------------------------------
-- Table `camicandy`.`transacciones_tiene_productos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `camicandy`.`transacciones_tiene_productos` ;

CREATE TABLE IF NOT EXISTS `camicandy`.`transacciones_tiene_productos` (
  `transacciones_id` INT(11) NOT NULL,
  `productos_id` INT(11) NOT NULL,
  `cantidad` INT(3) NOT NULL,
  PRIMARY KEY (`transacciones_id`, `productos_id`),
  INDEX `fk_transacciones_has_productos_productos1_idx` (`productos_id` ASC),
  INDEX `fk_transacciones_has_productos_transacciones1_idx` (`transacciones_id` ASC),
  CONSTRAINT `fk_transacciones_has_productos_productos1`
    FOREIGN KEY (`productos_id`)
    REFERENCES `camicandy`.`productos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_transacciones_has_productos_transacciones1`
    FOREIGN KEY (`transacciones_id`)
    REFERENCES `camicandy`.`transacciones` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;

USE `camicandy`;

DELIMITER $$

USE `camicandy`$$
DROP TRIGGER IF EXISTS `camicandy`.`check_admin_compra` $$
USE `camicandy`$$
CREATE TRIGGER `check_admin_compra` BEFORE INSERT ON `transacciones` FOR EACH ROW BEGIN
    IF NEW.importe_en_dolares < 0 AND NEW.usuarios_id NOT IN (SELECT id FROM usuarios WHERE rol = 'administrador') THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: Solo el administrador puede registrar una compra.';
    END IF;
END$$


USE `camicandy`$$
DROP TRIGGER IF EXISTS `camicandy`.`validar_clientes_proveedores` $$
USE `camicandy`$$
CREATE TRIGGER `validar_clientes_proveedores` BEFORE INSERT ON `transacciones` FOR EACH ROW BEGIN
    IF (NEW.clientes_id IS NULL AND NEW.proveedores_id IS NULL) OR (NEW.clientes_id IS NOT NULL AND NEW.proveedores_id IS NOT NULL) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: clientes_id y proveedores_id no pueden ser ambos NULL o ambos diferentes de NULL.';
    END IF;
END$$


USE `camicandy`$$
DROP TRIGGER IF EXISTS `camicandy`.`validar_monto` $$
USE `camicandy`$$
CREATE TRIGGER `validar_monto` BEFORE INSERT ON `transacciones` FOR EACH ROW BEGIN
    IF (NEW.importe_en_dolares > 0 AND
    NEW.proveedores_id IS NOT NULL) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: El importe de una compra no puede ser positivo.';
    ELSEIF (NEW.importe_en_dolares < 0 AND NEW.clientes_id IS NOT NULL) THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: El importe de una venta no puede ser negativo.';
    END IF;
END$$


USE `camicandy`$$
DROP TRIGGER IF EXISTS `camicandy`.`actualizar_stock_monto` $$
USE `camicandy`$$
CREATE TRIGGER `actualizar_stock_monto` AFTER INSERT ON `transacciones_tiene_productos` FOR EACH ROW BEGIN
    DECLARE total_amount DECIMAL(10, 2);
    
    -- Actualizar stock del producto
    UPDATE productos 
    SET cantidad_disponible = cantidad_disponible - NEW.cantidad 
    WHERE id = NEW.productos_id;
    
    -- Calcular el monto total de la transacción
    SET total_amount = (SELECT SUM(cantidad * precio_en_dolares) FROM transacciones_tiene_productos 
                        JOIN productos ON transacciones_tiene_productos.productos_id = productos.id
                        WHERE transacciones_tiene_productos.transacciones_id = NEW.transacciones_id);
    
    -- Actualizar el importe de la transacción
    UPDATE transacciones
    SET importe_en_dolares = total_amount
    WHERE id = NEW.transacciones_id;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
